name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the workflow when pushing to the main branch
  pull_request:
    branches:
      - main  # Trigger the workflow for pull requests to the main branch

jobs:
  # Job for building and testing the app
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx for multi-platform support (optional)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub (or GitHub Container Registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t your-dockerhub-username/your-app-name:latest .

      # Push the Docker image to Docker Hub (or GitHub Container Registry)
      - name: Push Docker image
        run: |
          docker push your-dockerhub-username/your-app-name:latest

  # Job for deploying the Docker container to your server (e.g., via SSH)
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure this job runs only after the build job completes

    steps:
      # Checkout the code again (if necessary for deployment automation)
      - name: Checkout code
        uses: actions/checkout@v2

      # SSH into the server and deploy the Docker container
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no username@your-server-ip << EOF
            docker pull your-dockerhub-username/your-app-name:latest
            docker stop your-app-container || true
            docker rm your-app-container || true
            docker run -d --name your-app-container -p 5000:5000 your-dockerhub-username/your-app-name:latest
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
